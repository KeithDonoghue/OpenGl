#version 430  
in vec3 normals;
in vec3 vertices;
in vec2 UV  ;  
out vec3 color;            
uniform sampler2D myTextureSampler;      
vec4 LightPosition = vec4 (100.0, 10.0, 4.0, 1.0); // Light position in world coords.
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity 
vec3 Kd = vec3 (0.8, 0.8, 0.8); // green diffuse surface reflectance
vec3 Ka = vec3 (0.3, 0.3, 0.3); 
vec3 Ks  = vec3 (1.0, 1.0, 1.0); 
vec3 globalAmbient = vec3 (0.6, 0.6, 0.6);
uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform vec3 Ambient;
uniform vec3 Diffuse;
uniform vec3 Specular;
vec3 LightIntensity; 
void main(){
 mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * normals);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertices,1.0);
  //normalised vector towards the light source
 vec3 s = normalize(vec3(LightPosition - eyeCoords));


  // Compute the specular term

  vec3 V = normalize(vec3(eyeCoords - LightPosition));//formally V

  vec3 H = normalize(vec3(vec4(s,1.0) -eyeCoords));

  float specularLight = pow(max(dot(tnorm, H), 0), 2);

  if (max( dot( s, tnorm ), 0.0 ) <= 0) specularLight = 0;



  // The diffuse shading equation, dot product gives us the cosine of angle between the vectors +  Ks * Ld * specularLight
  LightIntensity = globalAmbient*Ka + Ld*Kd * max( dot( s, tnorm ), 0.0 )+  Ks * Ld * specularLight ;
	vec2  uvr = vec2(UV.x,1-UV.y);
//	gl_FragColor = vec4 (LightIntensity, 1.0);
color = LightIntensity*texture( myTextureSampler, uvr ).bgr;
	vec4 text =  texture( myTextureSampler, uvr ).rgba;
//	gl_FragColor =  vec4(LightIntensity*text.rgb,text.a);
//color  = vec3(UV,UV.y);  
//gl_FragColor = vec4 (UV,1.0, 1.0);  
}

